@page "/test/{UserId}"
@implements IAsyncDisposable

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="false" PanelClass="pa-6 ma-4">
    <MudTabPanel Text="Consumer">
        <ConsumerTab Messages="@Messages" IsConnected="@IsConnected" OnClearClickCallback="@OnClear"/>
    </MudTabPanel>
    <MudTabPanel Text="Message sender">
        <MessageSenderTab UserId="@UserId"/>
    </MudTabPanel>
</MudTabs>

@code {

    [Inject]
    NavigationManager Navigation { get; set; }

    [Inject]
    IMessageInfoStorage MessagesStorage { get; set; }

    [ParameterAttribute]
    public string UserId { get; set; }

    private HubConnection _hubConnection;
    private IReadOnlyCollection<MessageInfo> Messages { get; set; }
    private bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync() {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"/signalr?UserId={UserId}"))
            .WithAutomaticReconnect(Enumerable.Range(0, 20).Select(r => TimeSpan.FromSeconds(r * 2)).ToArray())
            .Build();
        _hubConnection.On<string>("ReceiveMessage", async message => {
            Messages = await MessagesStorage.Push(new MessageInfo { DateTime = DateTime.Now, Message = message });
            StateHasChanged();
        });
        _hubConnection.Reconnecting += _ => InvokeAsync(StateHasChanged);
        _hubConnection.Closed += _ => InvokeAsync(StateHasChanged);
        _hubConnection.Reconnected += _ => InvokeAsync(StateHasChanged);
        await _hubConnection.StartAsync();
        await MessagesStorage.Init();
        Messages = await MessagesStorage.GetAll();
    }

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null) {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task OnClear() {
        Messages = null;
        await MessagesStorage.Clear();
        Messages = await MessagesStorage.GetAll();
    }

}