@inject NavigationManager _navigation
@inject IMessageInfoStorage _storage
@implements IAsyncDisposable

<style>
    .message {
        overflow-wrap: anywhere;
        max-height: 100px;
        overflow: auto;
        font-size: 0.7rem;
    }
</style>

<MudTable Items="@(Messages ?? Array.Empty<MessageInfo>())" Dense="false" Hover="true" Bordered="false" Striped="true" Loading="@(Messages == null)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recived messages: @(Messages?.Count ?? 0)</MudText>
        <ConsumerConnectionStatus IsConnected="@IsConnected"/>
        <MudSpacer/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnClear">Clear</MudButton>
    </ToolBarContent>
    <ColGroup>
        <col style="min-width: 180px"/>
        <col/>
        <col style="min-width: 40px;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh Style="text-align: center">Time</MudTh>
        <MudTh Style="text-align: center">Message</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="pa-1" Style="text-align: right">
            <MudText Typo="Typo.body2" Style="word-wrap: unset; overflow-wrap: unset">@context.DateTime</MudText>
        </MudTd>
        <MudTd Class="pa-1">
            <MudText Class="message">@context.Message</MudText>
        </MudTd>
        <MudTd Class="pa-1">
            <MudChipSet @bind-SelectedChip="SelectedChip" Filter="true" Mandatory="false">
                <MudChip OnClick="@(() => CopyToClipboard(context.Message))" Icon="@Icons.Filled.ContentCopy" Color="Color.Info"/>
            </MudChipSet>
        </MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code
{
    [Inject]
    public IJsApiService JsApiService { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private async Task CopyToClipboard(string message) {
        if (SelectedChip == null) return;
        await JsApiService.CopyToClipboardAsync(message);
        await Task.Delay(TimeSpan.FromSeconds(0.5));
        SelectedChip = null;
    }

    private MudChip SelectedChip { get; set; }

    private HubConnection _hubConnection;
    private IReadOnlyCollection<MessageInfo> Messages { get; set; }
    private bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync() {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigation.ToAbsoluteUri($"/signalr?UserId={UserId}"))
            .WithAutomaticReconnect(Enumerable.Range(0, 20).Select(r => TimeSpan.FromSeconds(r * 2)).ToArray())
            .Build();
        _hubConnection.On<string>("ReceiveMessage", async message => {
            Messages = await _storage.Push(new MessageInfo { DateTime = DateTime.Now, Message = message });
            StateHasChanged();
        });
        _hubConnection.Reconnecting += _ => InvokeAsync(StateHasChanged);
        _hubConnection.Closed += _ => InvokeAsync(StateHasChanged);
        _hubConnection.Reconnected += _ => InvokeAsync(StateHasChanged);
        await _hubConnection.StartAsync();
        await _storage.Init();
        Messages = await _storage.GetAll();
    }

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null) {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task OnClear() {
        Messages = null;
        await _storage.Clear();
        Messages = await _storage.GetAll();
    }
}