@page "/test-consumer/{UserId}"
@inject NavigationManager _navigation
@inject IMessageInfoStorage _storage
@using System.Text.Json
@implements IAsyncDisposable

<ConsumerConnectionStatus IsConnected="@IsConnected"/>
<MessageInfoTable MessageInfos="@Messages" OnClearClickCallback="@OnClear"/>

@code {

    [ParameterAttribute]
    public string UserId { get; set; }

    private HubConnection _hubConnection;
    private IReadOnlyCollection<MessageInfo> Messages { get; set; }
    private bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    private static readonly JsonSerializerOptions JsonIndentedSerializerOptions = new() { WriteIndented = true };

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigation.ToAbsoluteUri($"/signalr?UserId={UserId}"))
            .WithAutomaticReconnect(Enumerable.Range(0, 20).Select(r => TimeSpan.FromSeconds(r * 2)).ToArray())
            .Build();
        _hubConnection.On<string>("ReceiveMessage", async message =>
        {
    // format json document
            message = JsonSerializer.Serialize(JsonDocument.Parse(message).RootElement, JsonIndentedSerializerOptions);

            Messages = await _storage.Push(new MessageInfo { DateTime = DateTime.Now, Message = message });
            StateHasChanged();
        });
        _hubConnection.Reconnecting += _ => InvokeAsync(StateHasChanged);
        _hubConnection.Closed += _ => InvokeAsync(StateHasChanged);
        _hubConnection.Reconnected += _ => InvokeAsync(StateHasChanged);
        await _hubConnection.StartAsync();
        await _storage.Init();
        Messages = await _storage.GetAll();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task OnClear()
    {
        Messages = null;
        await _storage.Clear();
        Messages = await _storage.GetAll();
    }

}