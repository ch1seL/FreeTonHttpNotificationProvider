@page "/test-consumer"
@using Blazored.LocalStorage
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage

<MudText Typo="@Typo.h4" Align="@Align.Center" GutterBottom="@true">Test consumer</MudText>
<MudGrid Spacing="6" Justify="@Justify.SpaceBetween">
    <MudItem xs="12" md="9">
        <MudText Typo="@Typo.h6" GutterBottom="@true" Style="white-space: nowrap">
            There is a simple real-time consumer HTTP provider testing
        </MudText>
        <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
            <MudList Clickable="@true" Dense="@true">
                <MudListItem Icon="@Icons.Sharp.Filter1" IconSize="@Size.Small">Run <MudLink Target="_blank" Href="@ProjectConstants.DeBotLink">Notification DeBot</MudLink></MudListItem>
                <MudListItem Icon="@Icons.Sharp.Filter2" IconSize="@Size.Small">Sign two transactions to deploy your notification contract if not done yet</MudListItem>
                <MudListItem Icon="@Icons.Sharp.Filter3" IconSize="@Size.Small">Click <b>Send callbackUrl | deviceToken to provider</b></MudListItem>
                <MudListItem Icon="@Icons.Sharp.Filter4" IconSize="@Size.Small">Select <b>tonactions</b> provider(github.com/ton-actions/free-ton-http-notification-provider, ID = tonactions)</MudListItem>
                <MudListItem Icon="@Icons.Sharp.Filter5" IconSize="@Size.Small">Type <b>test</b> and enter</MudListItem>
                <MudListItem Icon="@Icons.Sharp.Filter6" IconSize="@Size.Small">You'll get a link to catch messages, open it in your browser and wait for the consumer will be connected to host</MudListItem>
                <MudListItem Icon="@Icons.Sharp.Filter7" IconSize="@Size.Small">Come back to DeBot and <b>Set rules</b> to receive messages</MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="3">
        <MudText Typo="@Typo.h6" GutterBottom="@true" Style="white-space: nowrap">Recent consumers</MudText>
        <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
            <MudList Dense="true" Clickable="@(MessageInfoKeys.Count > 0)">
                @if (MessageInfoKeys.Count > 0)
                {
                    @foreach (var key in MessageInfoKeys)
                    {
                        <MudListItem Href="@($"{_navigationManager.Uri}/{key}")">
                            <div class="d-flex justify-space-between">
                                <MudText>@key</MudText>
                                <MudIconButton Icon="@Icons.Rounded.RemoveCircleOutline" Size="@Size.Small" OnClick="() => DeleteConsumer(key)"/>
                            </div>
                        </MudListItem>
                    }
                }
                else
                {
                    <MudListItem>
                        <div class="d-flex justify-space-between">
                            <MudSkeleton Width="70%" Height="30px"/>
                            <MudSkeleton Width="20px" Height="30px"/>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudSkeleton Width="70%" Height="30px"/>
                            <MudSpacer/>
                            <MudSkeleton Width="20px" Height="30px"/>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{

    protected override async Task OnInitializedAsync()
    {
        await FillMessages();

        _localStorage.Changed += AddRemoveKeys;
    }

    private void AddRemoveKeys(object sender, ChangedEventArgs args)
    {
        if (!args.Key.Split(':', 2)[0].Equals(MessageInfoStorage.StoragePrefix))
            return;
        if (args.NewValue == null)
            MessageInfoKeys.Remove(args.Key);
        else
            MessageInfoKeys.Add(args.Key);
        StateHasChanged();
    }

    private async Task FillMessages()
    {
        var storageLength = await _localStorage.LengthAsync();
        var getKeyTasks = Enumerable.Range(0, storageLength - 1).Select(async i => await _localStorage.KeyAsync(i));
        var keys = await Task.WhenAll(getKeyTasks);
        MessageInfoKeys = keys
            .Select(key => key.Split(':', 2))
            .Where(key => key.Length == 2 && key[0] == MessageInfoStorage.StoragePrefix)
            .Select(key => key[1])
            .ToList();
    }

    private List<string> MessageInfoKeys { get; set; } = new();

    private async Task DeleteConsumer(string key)
    {
        await _localStorage.RemoveItemAsync($"{MessageInfoStorage.StoragePrefix}:{key}");
        await FillMessages();
        await InvokeAsync(StateHasChanged);
    }

}